{"version":3,"sources":["pages/AssetPage.tsx","components/SellButton.tsx","services/ContractService.tsx","services/TransactionService.tsx","assets/algo_dark.svg","components/BuyButton.tsx","logo.svg","components/Header.tsx","pages/HomePage.tsx","App.tsx","reportWebVitals.ts","index.tsx","services/ChainService.tsx","services/WalletService.tsx","utils/consts.ts","utils/enums.ts","utils/functions.ts","utils/styled-components.ts"],"names":["INITIAL_STATE","fetching","contractResult","owner","assetInfo","imageSrc","description","AssetPage","props","contractService","ContractService","transactionService","TransactionService","chainService","ChainService","setAsset","index","a","setState","indexer","lookupAssetByID","do","then","response","asset","params","getAssetMetadata","url","catch","error","console","lookupAssetBalances","ownerInfo","balances","find","item","amount","address","onSellAsset","seller","assetIndex","price","PRICE","generateAssetSaleContract","contract","result","contractHash","hash","sellAsset","log","onBuyAsset","connector","createSession","Uint8Array","Buffer","from","CONTRACT_RESULT","contractSig","LogicSigAccount","buyer","state","buyAsset","ipfsUrl","replace","IPFS","IPFS_DOMAIN","getAssetMetadataFromIpfs","data","properties","source_image","this","isOwner","isCreator","creator","className","name","src","alt","disabled","manager","React","Component","AssetPageWithParams","useParams","Number","SellButton","onClick","FIREBASE_ID","fetch","request","json","algod","walletService","WalletService","sendAndConfirm","signedTxns","sendRawTransaction","sentTxns","algosdk","waitForConfirmation","txId","confirmedTxns","contractEncoded","getTransactionParams","suggestedParams","txn0","makePaymentTxnWithSuggestedParamsFromObject","to","txn1","makeAssetTransferTxnWithSuggestedParamsFromObject","txn2","group","assignGroupID","sign","signLogicSigTransactionObject","blob","closeRemainderTo","txn3","txn4","ARTIST_SOUND_ADDRESS","algoStyleSmall","height","marginLeft","BuyButton","style","algo_dark","SAddress","styled","span","Header","killSession","connectWallet","logo","ellipseAddress","HomePage","connected","accounts","App","subscribeToWalletEvents","on","payload","onConnect","onSessionUpdate","onDisconnect","process","basename","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","isMainNet","IS_MAIN_NET","algodHost","ALGOD_HOST_MAIN","ALGOD_HOST_TEST","Algodv2","indexerHost","INDEXER_HOST_MAIN","INDEXER_HOST_TEST","Indexer","WalletConnect","bridge","BRIDGE","qrcodeModal","QRCodeModal","txns","txnsToSign","map","txn","encodeUnsignedTransaction","toString","includes","signers","formatJsonRpcRequest","sendCustomRequest","Chain","width","slice","SButton","button","SImage","img","SAssetInfo","div"],"mappings":"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","file":"static/js/main.8f2a8dd8.chunk.js","sourcesContent":["import WalletConnect from '@walletconnect/client';\nimport { LogicSigAccount } from 'algosdk';\nimport React from 'react';\nimport { useParams } from 'react-router';\nimport BuyButton from '../components/BuyButton';\nimport SellButton from '../components/SellButton';\nimport ChainService from '../services/ChainService';\nimport ContractService from '../services/ContractService';\nimport TransactionService from '../services/TransactionService';\nimport {\n  CONTRACT_RESULT,\n  IPFS,\n  IPFS_DOMAIN,\n  PRICE,\n  SAssetInfo,\n  SButton,\n  SImage,\n} from '../utils';\n\ninterface AssetPageProps {\n  connector: WalletConnect;\n  address: string;\n  assetIndex: number;\n}\n\ninterface AssetPageState {\n  fetching: boolean;\n  contractResult: string;\n  owner: string;\n  assetInfo: any;\n  imageSrc: string;\n  description: string;\n}\n\nconst INITIAL_STATE: AssetPageState = {\n  fetching: false,\n  contractResult: '',\n  owner: '',\n  assetInfo: null,\n  imageSrc: '',\n  description: '',\n};\n\nclass AssetPage extends React.Component<AssetPageProps, AssetPageState> {\n  constructor(props: AssetPageProps) {\n    super(props);\n    this.state = { ...INITIAL_STATE };\n  }\n\n  contractService = new ContractService();\n  transactionService = new TransactionService();\n  chainService = new ChainService();\n\n  componentDidMount() {\n    console.log('asset component did mount');\n    this.setAsset(this.props.assetIndex);\n  }\n\n  setAsset = async (index: number) => {\n    this.setState({ fetching: true });\n    this.chainService.indexer\n      .lookupAssetByID(index)\n      .do()\n      .then((response) => {\n        const assetInfo = response.asset.params;\n        this.setState({ assetInfo, fetching: false });\n        this.getAssetMetadata(assetInfo.url);\n      })\n      .catch((error: Error) => {\n        console.error(error);\n      });\n\n    this.chainService.indexer\n      .lookupAssetBalances(index)\n      .do()\n      .then((response) => {\n        const ownerInfo = response.balances.find(\n          (item: any) => item.amount > 0\n        );\n        this.setState({ owner: ownerInfo.address });\n      });\n    // FirebaseClient.getContractForAsset(index).then((response) => {\n    //   this.setState({\n    //     thisContract: response,\n    //   });\n    // });\n  };\n\n  onSellAsset = async () => {\n    const seller = this.props.address;\n    const assetIndex = this.props.assetIndex;\n    const price = PRICE;\n\n    if (seller && price) {\n      this.setState({ fetching: true });\n      try {\n        const contract = await this.contractService.generateAssetSaleContract(\n          seller,\n          assetIndex,\n          price\n        );\n\n        const { result: contractResult, hash: contractHash } = contract;\n\n        const confirmedTxn = await this.transactionService.sellAsset({\n          seller,\n          assetIndex,\n          contractResult,\n        });\n\n        this.setState({ contractResult });\n\n        console.log(contractResult, contractHash);\n      } catch (error) {\n        throw error;\n      }\n      this.setState({ fetching: false });\n    }\n  };\n\n  onBuyAsset = async () => {\n    if (!this.props.address) {\n      this.props.connector.createSession();\n      return;\n    }\n\n    const contractResult = new Uint8Array(\n      Buffer.from(CONTRACT_RESULT, 'base64')\n    );\n\n    const contractSig = new LogicSigAccount(contractResult);\n    const buyer = this.props.address;\n    const seller = this.state.owner;\n\n    const assetIndex = this.props.assetIndex;\n    const price = PRICE;\n\n    if (buyer && seller && contractSig && assetIndex && price) {\n      this.setState({ fetching: true });\n      try {\n        const confirmedTxn = await this.transactionService.buyAsset({\n          buyer,\n          seller,\n          assetIndex,\n          price,\n          contractSig,\n        });\n        this.setState({ contractResult: '' });\n      } catch (error) {\n        throw error;\n      }\n      this.setState({ fetching: false });\n    }\n  };\n\n  getAssetMetadata = async (url: any) => {\n    const ipfsUrl = url.replace(IPFS, IPFS_DOMAIN);\n    const data = await this.contractService.getAssetMetadataFromIpfs(ipfsUrl);\n    const imageSrc = data.properties.source_image.replace(IPFS, IPFS_DOMAIN);\n    this.setState({ description: data.description, imageSrc });\n  };\n\n  render() {\n    const isOwner = this.state.owner === this.props.address;\n    const isCreator = this.state.assetInfo?.creator === this.props.address;\n\n    const assetInfo = this.state.assetInfo;\n    console.log(this.state);\n\n    return (\n      assetInfo && (\n        <div className='pv5 ph6'>\n          <p className='f3 b'>{assetInfo.name}</p>\n          <div className='flex justify-between'>\n            <div className='w-40'>\n              <SImage src={this.state.imageSrc} alt='nft' />\n              <div className='mt3'>\n                {isOwner && <SellButton onSellAsset={this.onSellAsset} />}\n                {isCreator && !isOwner && (\n                  <SButton className='w-100' disabled>\n                    Asset on Sale\n                  </SButton>\n                )}\n                {!isCreator && !isOwner && (\n                  <BuyButton price={PRICE} onBuyAsset={this.onBuyAsset} />\n                )}\n              </div>\n            </div>\n            <div className='w-50'>\n              <SAssetInfo>\n                <span className='b mb1'>owner</span>\n                <span>{assetInfo.manager}</span>\n              </SAssetInfo>\n              {this.state.description && (\n                <SAssetInfo>\n                  <span className='b mb1'>description</span>\n                  <span>{this.state.description}</span>\n                </SAssetInfo>\n              )}\n              <SAssetInfo>\n                <span className='b mb1'>url</span>\n                <span>{assetInfo.url}</span>\n              </SAssetInfo>\n              <SAssetInfo>\n                <span className='b mb1'>creator</span>\n                <span>{assetInfo.creator}</span>\n              </SAssetInfo>\n            </div>\n          </div>\n        </div>\n      )\n    );\n  }\n}\n\nfunction AssetPageWithParams(props: any) {\n  const params = useParams();\n  return <AssetPage {...props} assetIndex={Number(params.index)} />;\n}\n\nexport default AssetPageWithParams;\n","import { FunctionComponent } from 'react';\nimport { SButton } from '../utils';\n\ninterface SellButtonProps {\n  onSellAsset: () => {};\n}\n\nconst SellButton: FunctionComponent<SellButtonProps> = ({\n  onSellAsset,\n}: SellButtonProps) => {\n  return <SButton className=\"w-100 pointer\" onClick={onSellAsset}>Put on Sale</SButton>;\n};\n\nexport default SellButton;\n","import { FIREBASE_ID } from '../utils';\n\nexport default class ContractService {\n  generateAssetSaleContract = async (\n    seller: string,\n    asset: number,\n    price: number\n  ) => {\n    try {\n      const url = `https://us-central1-${FIREBASE_ID}.cloudfunctions.net/asset_sale_contract?seller=${seller}&asset=${asset}&price=${price}`;\n      const request = await fetch(url);\n      return await request.json();\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getAssetMetadataFromIpfs = async (url: string) => {\n    try {\n      return fetch(url).then((response) => response?.json());\n    } catch (error) {\n      throw error;\n    }\n  };\n}\n","import algosdk, { LogicSigAccount, Transaction } from 'algosdk';\nimport { ARTIST_SOUND_ADDRESS } from '../utils';\nimport ChainService from './ChainService';\nimport WalletService from './WalletService';\n\nexport default class TransactionService {\n  algod = new ChainService().algod;\n  walletService = new WalletService();\n\n  sendAndConfirm = async (signedTxns: Uint8Array[]) => {\n    try {\n      const sentTxns = await this.algod.sendRawTransaction(signedTxns).do();\n      console.log('sentTxns', sentTxns);\n      const confirmedTxns = await algosdk.waitForConfirmation(\n        this.algod,\n        sentTxns.txId,\n        4\n      );\n      console.log('success', confirmedTxns);\n      return confirmedTxns;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  sellAsset = async ({ seller, assetIndex, contractResult }: any) => {\n    try {\n      const contractEncoded = new Uint8Array(\n        Buffer.from(contractResult, 'base64')\n      );\n      const contractSig = new LogicSigAccount(contractEncoded);\n      const suggestedParams = await this.algod.getTransactionParams().do();\n      // fund escrow\n      const txn0: Transaction =\n        algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n          from: seller,\n          to: contractSig.address(),\n          amount: 0.5 * 1e6,\n          suggestedParams,\n        });\n      // opt in escrow\n      const txn1: Transaction =\n        algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: contractSig.address(),\n          to: contractSig.address(),\n          amount: 0,\n          assetIndex,\n          suggestedParams,\n        });\n      // transfer asset to escrow\n      const txn2: Transaction =\n        algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: seller,\n          to: contractSig.address(),\n          assetIndex,\n          amount: 1,\n          suggestedParams,\n        });\n\n      const group = algosdk.assignGroupID([txn0, txn1, txn2]);\n      const signedTxns = await this.walletService.sign(group);\n      signedTxns[1] = algosdk.signLogicSigTransactionObject(\n        group[1],\n        contractSig\n      ).blob;\n\n      const confirmedTxns = await this.sendAndConfirm(signedTxns);\n      return confirmedTxns;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  buyAsset = async ({\n    buyer,\n    seller,\n    assetIndex,\n    price,\n    contractSig,\n  }: any) => {\n    try {\n      const suggestedParams = await this.algod.getTransactionParams().do();\n      // pay seller\n      const txn0 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: buyer,\n        to: seller,\n        amount: price * 1e6 * 0.9,\n        suggestedParams,\n      });\n      // opt in buyer\n      const txn1 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        from: buyer,\n        to: buyer,\n        amount: 0,\n        assetIndex,\n        suggestedParams,\n      });\n      // transfer asset to buyer\n      const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        from: contractSig.address(),\n        to: buyer,\n        amount: 1,\n        assetIndex,\n        closeRemainderTo: buyer,\n        suggestedParams,\n      });\n      // close remainder to seller\n      const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: contractSig.address(),\n        to: seller,\n        amount: 0,\n        closeRemainderTo: seller,\n        suggestedParams,\n      });\n      // pay collaborator\n      const txn4 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: buyer,\n        to: ARTIST_SOUND_ADDRESS,\n        amount: price * 1e6 * 0.1,\n        suggestedParams,\n      });\n      const group = algosdk.assignGroupID([txn0, txn1, txn2, txn3, txn4]);\n      const signedTxns = await this.walletService.sign(group);\n\n      signedTxns[2] = algosdk.signLogicSigTransactionObject(\n        group[2],\n        contractSig\n      ).blob;\n      signedTxns[3] = algosdk.signLogicSigTransactionObject(\n        group[3],\n        contractSig\n      ).blob;\n\n      return await this.sendAndConfirm(signedTxns);\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  };\n}\n","export default __webpack_public_path__ + \"static/media/algo_dark.325d1e4a.svg\";","import { FunctionComponent } from 'react';\nimport algo_dark from '../assets/algo_dark.svg';\nimport { SButton } from '../utils';\n\nconst algoStyleSmall = {\n  height: '1rem',\n  marginLeft: '0.2rem',\n};\n\ninterface BuyButtonProps {\n  price: number;\n  onBuyAsset: () => {};\n}\n\nconst BuyButton: FunctionComponent<BuyButtonProps> = ({\n  price,\n  onBuyAsset,\n}) => {\n  return (\n    <SButton className='pointer-fade w-100' onClick={onBuyAsset}>\n      <div className='flex justify-center'>\n        {price}\n        <img style={algoStyleSmall} src={algo_dark} alt='algos' />\n      </div>\n    </SButton>\n  );\n};\n\nexport default BuyButton;\n","export default __webpack_public_path__ + \"static/media/logo.21e62254.svg\";","import WalletConnect from '@walletconnect/client';\nimport { FunctionComponent } from 'react';\nimport styled from 'styled-components';\nimport logo from '../../src/logo.svg';\nimport { ellipseAddress } from '../utils';\nimport { SButton } from '../utils';\n\ninterface HeaderProps {\n  address: string;\n  connector: WalletConnect;\n  killSession: () => {};\n}\n\nconst SAddress = styled.span`\n  color: aqua;\n`;\n\nconst Header: FunctionComponent<HeaderProps> = ({\n  address,\n  connector,\n  killSession,\n}: HeaderProps) => {\n  const connectWallet = async () => connector.createSession();\n\n  return (\n    <div className='flex items-start justify-between'>\n      <div className='flex items-center f4 b w-50'>\n        <img src={logo} className='app-logo mr2' alt='logo' />\n        Mushroom Cloud NFT\n      </div>\n      {address ? (\n        <div className='flex flex-column tr'>\n          <SAddress className='b'>{ellipseAddress(address)}</SAddress>\n          <span className='pointer-fade' onClick={killSession}>\n            Disconnect\n          </span>\n        </div>\n      ) : (\n        <SButton className='pointer-fade' onClick={connectWallet}>\n          Connect Wallet\n        </SButton>\n      )}\n    </div>\n  );\n};\n\nexport default Header;\n","import { FunctionComponent } from 'react';\n\ninterface HomePageProps {}\n\nconst HomePage: FunctionComponent<HomePageProps> = () => {\n  return (\n    <div className=\"vh-75 flex flex-column justify-center\">\n      <h1>Mushroom Cloud LA / Proximities</h1>\n      <h2>by Nancy Baker Cahill</h2>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import WalletConnect from '@walletconnect/client';\nimport { IInternalEvent } from '@walletconnect/types';\nimport React from 'react';\nimport { BrowserRouter, Navigate, Route, Routes } from 'react-router-dom';\nimport './App.css';\nimport Header from './components/Header';\nimport AssetPage from './pages/AssetPage';\nimport HomePage from './pages/HomePage';\nimport WalletService from './services/WalletService';\n\ninterface AppProps {}\n\ninterface AppState {\n  connector: WalletConnect;\n  fetching: boolean;\n  connected: boolean;\n  accounts: string[];\n  address: string;\n  // assets: IAssetData[];\n}\n\nconst INITIAL_STATE: AppState = {\n  connector: new WalletService().connector,\n  fetching: false,\n  connected: false,\n  accounts: [],\n  address: '',\n  // contractResult: null,\n  // assets: [],\n};\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    const { connector } = INITIAL_STATE;\n    const { connected, accounts } = connector;\n    this.state = {\n      ...INITIAL_STATE,\n      connected,\n      accounts,\n      address: accounts[0],\n    };\n  }\n\n  componentDidMount() {\n    console.log('app component did mount');\n    this.subscribeToWalletEvents();\n    console.log(process.env);\n  }\n\n  subscribeToWalletEvents = () => {\n    const connector = this.state.connector;\n    if (!connector) return;\n\n    connector.on('connect', (error: Error | null, payload: any) => {\n      console.log(`connector.on(\"connect\")`);\n      if (error) throw error;\n      this.onConnect(payload);\n    });\n\n    connector.on(\n      'session_update',\n      async (error: Error | null, payload: any) => {\n        console.log(`connector.on(\"session_update\")`);\n        if (error) throw error;\n        const accounts = payload.params[0].accounts;\n        this.onSessionUpdate(accounts);\n      }\n    );\n\n    connector.on('disconnect', (error: Error | null, payload: any) => {\n      console.log(`connector.on(\"disconnect\")`);\n      if (error) throw error;\n      this.onDisconnect();\n    });\n\n    if (connector.connected) {\n      const { accounts } = connector;\n      this.setState({\n        connected: true,\n        accounts,\n        address: accounts[0],\n      });\n      this.onSessionUpdate(accounts);\n    }\n    this.setState({ connector });\n  };\n\n  onConnect = async (payload: IInternalEvent) => {\n    const { accounts } = payload.params[0];\n    await this.setState({\n      connected: true,\n      accounts,\n      address: accounts[0],\n    });\n    // await this.getAccountAssets();\n  };\n\n  onSessionUpdate = async (accounts: string[]) => {\n    await this.setState({ accounts, address: accounts[0] });\n    // await this.getAccountAssets();\n  };\n\n  onDisconnect = async () => {\n    await this.setState({ ...INITIAL_STATE });\n  };\n\n  // getAccountAssets = async () => {\n  //   const { address, chain } = this.state;\n  //   this.setState({ fetching: true });\n  //   try {\n  //     // get account balances\n  //     const assets = await apiGetAccountAssets(chain, address);\n  //     await this.setState({ fetching: false, address, assets });\n  //   } catch (error) {\n  //     console.error(error);\n  //     await this.setState({ fetching: false });\n  //   }\n  // };\n\n  killSession = async () => {\n    const { connector } = this.state;\n    if (connector) connector.killSession();\n    await this.setState({ ...INITIAL_STATE });\n  };\n\n  render() {\n    return (\n      <div>\n        <Header\n          address={this.state.address}\n          connector={this.state.connector}\n          killSession={this.killSession}\n        ></Header>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <Routes>\n            <Route path='/' element={<HomePage />} />\n            <Route\n              path='/asset/:index'\n              element={\n                <AssetPage\n                  address={this.state.address}\n                  connector={this.state.connector}\n                />\n              }\n            />\n            <Route path='*' element={<Navigate to='/' replace />} />\n          </Routes>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import algosdk from 'algosdk';\nimport {\n  ALGOD_HOST_MAIN,\n  ALGOD_HOST_TEST,\n  INDEXER_HOST_MAIN,\n  INDEXER_HOST_TEST,\n  IS_MAIN_NET\n} from '../utils';\n\nexport default class ChainService {\n  isMainNet = IS_MAIN_NET;\n  algodHost = this.isMainNet ? ALGOD_HOST_MAIN : ALGOD_HOST_TEST;\n  algod = new algosdk.Algodv2('', this.algodHost, '');\n  indexerHost = this.isMainNet ? INDEXER_HOST_MAIN : INDEXER_HOST_TEST;\n  indexer = new algosdk.Indexer('', this.indexerHost, '');\n}\n","import { formatJsonRpcRequest } from '@json-rpc-tools/utils';\nimport WalletConnect from '@walletconnect/client';\nimport QRCodeModal from 'algorand-walletconnect-qrcode-modal';\nimport algosdk from 'algosdk';\nimport { BRIDGE } from '../utils';\n\nexport default class WalletService {\n  connector = new WalletConnect({\n    bridge: BRIDGE,\n    qrcodeModal: QRCodeModal,\n  });\n\n  sign = async (txns: any) => {\n    const txnsToSign = txns.map((txn: any) => {\n      const encodedTxn = Buffer.from(\n        algosdk.encodeUnsignedTransaction(txn)\n      ).toString('base64');\n      let result: any = {\n        txn: encodedTxn,\n      };\n      if (this.connector.accounts.includes(txn.from)) {\n        result.signers = [];\n      }\n      return result;\n    });\n    const request = formatJsonRpcRequest('algo_signTxn', [txnsToSign]);\n    const response = await this.connector.sendCustomRequest(request);\n\n    const signedTxns = response.map((element: any) => {\n      return element ? new Uint8Array(Buffer.from(element, 'base64')) : null;\n    });\n\n    return signedTxns;\n  };\n}\n","export const BRIDGE = 'https://bridge.walletconnect.org';\nexport const ALGOD_HOST_MAIN = 'https://node.algoexplorerapi.io';\nexport const ALGOD_HOST_TEST = 'https://node.testnet.algoexplorerapi.io';\nexport const INDEXER_HOST_MAIN = 'https://algoindexer.algoexplorerapi.io/';\nexport const INDEXER_HOST_TEST =\n  'https://algoindexer.testnet.algoexplorerapi.io/';\nexport const FIREBASE_ID = 'mushroom-cloud-api';\nexport const IPFS = 'ipfs://';\nexport const IPFS_DOMAIN = 'https://ipfs.io/ipfs/';\n\nexport const PRICE = 2;\nexport const ARTIST_MAIN_ADDRESS =\n  'PIQVKPN4EAHMS74DK5CSCIZCJ6CM7OSIUZYQ5Y6MYFP26XZHBPRNJHAPDA';\nexport const ARTIST_SOUND_ADDRESS =\n  'E6U45JTJJQKGIQXECBTUAEARHU7PKCSRVLR5Q4PWT2EDG5XSOVOMK77LUA';\nexport const CONTRACT_RESULT =\n  'BiAGAQTnhsgmAAMFJgEgeiFVPbwgDsl/g1dFISMiT4TPukimcQ7jzMFfr18nC+IxATIADjEGMgMSEDEgMgMSEDIEIQQSQADXMgQhBRJAAAEAMgQhBRIzABAiEhAzAAiBgJX1KhIQMwAHKBIQMwAJMgMSEDMBECMSEDMBEiUSEDMBADMAABIQMwEAMwEUEhAzARUyAxIQMwERJBIQMwIQIxIQMwISIhIQMwIUMwEAEhAzAhUzAQASEDMCESQSEDMDECISEDMDCCUSEDMDBygSEDMDCSgSEDMDADMCABIQMwQQIhIQMwQIgYCt4gQSEDMEB4AgJ6nOpmlMFGRC5BBnQBARPT71ClGq49hx9p6IM3bydVwSEDMECTIDEhBCANwyBCEEEjMAECISEDMACIGgwh4SEDMAACgSEDMACTIDEhAzARAjEhAzARIlEhAzAQAzAAcSEDMBADMBFBIQMwEVMgMSEDMBESQSEDMCECMSEDMCEiISEDMCACgSEDMCFDMBABIQMwIVMgMSEDMCESQSEDIEIQQSMwAQIxIQMwASJRIQMwAAMwAUEhAzABUyAxIQMwARJBIQMwAUKBIQMwEQIxIQMwESIhIQMwERJBIQMwEUKBIQMwEVKBIQMwIQIhIQMwIIJRIQMwIAMwEAEhAzAgcoEhAzAgkoEhAREEM=';\nexport const IS_MAIN_NET = false;\n","export enum Chain {\n  MainNet = 'mainnet',\n  TestNet = 'testnet',\n}\n","import { url } from 'inspector';\nimport { IPFS, IPFS_DOMAIN } from '.';\n\nexport function ellipseAddress(address: string, width = 6): string {\n  return `${address.slice(0, width)}...${address.slice(-width)}`;\n}\n\n// export function ipfsUrl = (url: string): string => url.replace(IPFS, IPFS_DOMAIN);","import styled from 'styled-components';\n\nexport const SButton = styled.button`\n  border-radius: 0.5rem;\n  padding: 0.5rem 1rem;\n  border: none;\n`;\n\nexport const SImage = styled.img`\n  max-width: 100%;\n  border-radius: 0.5rem;\n  border-style: solid;\n  border-width: 0.05rem;\n`;\n\nexport const SAssetInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 0 1rem 2rem 1rem;\n  overflow-wrap: break-word;\n  // margin-bottom: 1rem;\n  // border-radius: 0.5rem;\n  // border-style: solid;\n  // border-width: 0.05rem;\n`;\n"],"sourceRoot":""}