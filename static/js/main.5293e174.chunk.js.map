{"version":3,"sources":["assets/algo_light.svg","utils/consts.ts","utils/enums.ts","utils/functions.ts","utils/styled-components.ts","pages/AssetPage.tsx","components/SellForm.tsx","services/ContractService.tsx","services/TransactionService.tsx","assets/algo_dark.svg","components/BuyButton.tsx","logo.svg","components/Header.tsx","pages/HomePage.tsx","services/FirebaseService.tsx","App.tsx","reportWebVitals.ts","index.tsx","services/ChainService.tsx","services/WalletService.tsx"],"names":["Chain","Status","FirebaseFields","FirebaseCollections","NodeEnv","BRIDGE","ALGOD_HOST_MAIN","ALGOD_HOST_TEST","INDEXER_HOST_MAIN","INDEXER_HOST_TEST","IPFS","IPFS_DOMAIN","ellipseAddress","address","width","slice","formatMoney","value","toFixed","replace","SButton","styled","button","SImage","img","SAssetInfo","div","SIcon","INITIAL_STATE","fetching","contract","price","owner","assetInfo","imageSrc","externalUrl","description","status","AssetPage","props","contractService","ContractService","transactionService","TransactionService","setAsset","index","a","chainService","firebaseService","setState","indexer","lookupAssetByID","do","then","response","asset","params","setAssetMetadata","url","catch","error","console","lookupAssetBalances","ownerInfo","balances","find","item","amount","getContractForAsset","data","Price","sellAsset","seller","assetIndex","generateAssetSaleContract","contractResult","result","addDocument","AssetSaleContracts","asset_index","contract_result","Pending","is_main","isMainNet","created_on","serverTimestamp","updateDocument","id","Active","updated_on","buyAsset","connector","buyer","createSession","getContractSig","contractSig","state","Seller","Complete","updated","ContractResult","Uint8Array","Buffer","from","LogicSigAccount","ipfsUrl","getAssetMetadataFromIpfs","image","external_url","this","className","name","src","alt","isCreator","creator","hasContract","disabled","algo_light","renderButton","href","target","React","Component","AssetPageWithParams","useParams","Number","SellForm","onSellAsset","onInputChange","event","parseInt","type","min","step","onChange","required","placeholder","onClick","process","fetch","request","json","algod","ChainService","walletService","WalletService","sendAndConfirm","signedTxns","sendRawTransaction","sentTxns","log","algosdk","waitForConfirmation","txId","confirmedTxns","contractEncoded","getTransactionParams","suggestedParams","txn0","makePaymentTxnWithSuggestedParamsFromObject","to","txn1","makeAssetTransferTxnWithSuggestedParamsFromObject","txn2","group","assignGroupID","sign","signLogicSigTransactionObject","blob","closeRemainderTo","txn3","txn4","BuyButton","algo_dark","SAddress","span","Header","killSession","connectWallet","logo","HomePage","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","FirebaseService","currentAccountData","setup","account","initializeApp","getAnalytics","getDocument","currentAccount","exists","collectionName","firestore","getFirestore","ref","collection","addDoc","getDoc","docIndex","doc","updateDoc","deleteDocument","deleteDoc","contracts","query","where","AssetIndex","getDocs","snapshot","docs","length","getContractsForSeller","filter","IsMain","connected","accounts","App","setupFirebase","subscribeToWalletEvents","on","payload","window","location","reload","onConnect","onSessionUpdate","onDisconnect","basename","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","Production","algodHost","Algodv2","indexerHost","Indexer","WalletConnect","bridge","qrcodeModal","QRCodeModal","txns","txnsToSign","map","txn","encodeUnsignedTransaction","toString","includes","signers","formatJsonRpcRequest","sendCustomRequest"],"mappings":"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","file":"static/js/main.5293e174.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/algo_light.4f066c4c.svg\";","export const BRIDGE = 'https://bridge.walletconnect.org';\nexport const ALGOD_HOST_MAIN = 'https://node.algoexplorerapi.io';\nexport const ALGOD_HOST_TEST = 'https://node.testnet.algoexplorerapi.io';\nexport const INDEXER_HOST_MAIN = 'https://algoindexer.algoexplorerapi.io/';\nexport const INDEXER_HOST_TEST =\n  'https://algoindexer.testnet.algoexplorerapi.io/';\nexport const IPFS = 'ipfs://';\nexport const IPFS_DOMAIN = 'https://ipfs.io/ipfs/';\n","export enum Chain {\n  MainNet = 'mainnet',\n  TestNet = 'testnet',\n}\n\nexport enum Status {\n  Pending = 'pending',\n  Active = 'active',\n  Complete = 'complete',\n}\n\nexport enum FirebaseFields {\n  Seller = 'seller',\n  AssetIndex = 'asset_index',\n  Price = 'price',\n  ContractResult = 'contract_result',\n  Status = 'status',\n  IsMain = 'is_main',\n  CreatedOn = 'created_on',\n  UpdatedOn = 'updated_on',\n}\n\nexport enum FirebaseCollections {\n  AssetSaleContracts = 'asset_sale_contracts',\n}\n\nexport enum NodeEnv {\n  Production = 'production',\n}\n","export function ellipseAddress(address: string, width = 6): string {\n  return `${address.slice(0, width)}...${address.slice(-width)}`;\n}\n\nexport function formatMoney(value: number): string {\n  return value.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n}\n","import styled from 'styled-components';\n\nexport const SButton = styled.button`\n  border-radius: 0.5rem;\n  padding: 0.5rem 1rem;\n  border: none;\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\nexport const SImage = styled.img`\n  max-width: 100%;\n  border-radius: 0.5rem;\n  border-style: solid;\n  border-width: 0.05rem;\n`;\n\nexport const SAssetInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 0 1rem 2rem 1rem;\n  overflow-wrap: break-word;\n`;\n\nexport const SIcon = styled.img`\n  height: 1rem;\n  margin-left: 0.2rem;\n`;\n","import { serverTimestamp } from '@firebase/firestore';\nimport WalletConnect from '@walletconnect/client';\nimport { LogicSigAccount } from 'algosdk';\nimport React from 'react';\nimport { useParams } from 'react-router';\nimport algo_light from '../assets/algo_light.svg';\nimport BuyButton from '../components/BuyButton';\nimport SellForm from '../components/SellForm';\nimport ChainService from '../services/ChainService';\nimport ContractService from '../services/ContractService';\nimport FirebaseService from '../services/FirebaseService';\nimport TransactionService from '../services/TransactionService';\nimport {\n  FirebaseCollections,\n  FirebaseFields,\n  formatMoney,\n  IPFS,\n  IPFS_DOMAIN,\n  SAssetInfo,\n  SButton,\n  SIcon,\n  SImage,\n  Status,\n} from '../utils';\n\ninterface AssetPageProps {\n  connector: WalletConnect;\n  firebaseService: FirebaseService;\n  chainService: ChainService;\n  address: string;\n  assetIndex: number;\n}\n\ninterface AssetPageState {\n  fetching: boolean;\n  contract: any;\n  price: number;\n  owner: string;\n  assetInfo: any;\n  imageSrc: string;\n  externalUrl: string;\n  description: string;\n  status: Status | null;\n}\n\nconst INITIAL_STATE: AssetPageState = {\n  fetching: false,\n  contract: null,\n  price: -1,\n  owner: '',\n  assetInfo: null,\n  imageSrc: '',\n  externalUrl: '',\n  description: '',\n  status: null,\n};\n\nclass AssetPage extends React.Component<AssetPageProps, AssetPageState> {\n  constructor(props: AssetPageProps) {\n    super(props);\n    this.state = { ...INITIAL_STATE };\n    this.setAsset(this.props.assetIndex);\n  }\n\n  contractService = new ContractService();\n  transactionService = new TransactionService();\n\n  setAsset = async (index: number): Promise<void> => {\n    const { chainService, firebaseService } = this.props;\n    this.setState({ fetching: true });\n    chainService.indexer\n      .lookupAssetByID(index)\n      .do()\n      .then((response) => {\n        const assetInfo = response.asset.params;\n        this.setState({ assetInfo, fetching: false });\n        this.setAssetMetadata(assetInfo.url);\n      })\n      .catch((error: Error) => {\n        console.error(error);\n      });\n    chainService.indexer\n      .lookupAssetBalances(index)\n      .do()\n      .then((response) => {\n        const ownerInfo = response.balances.find((item: any) => item.amount);\n        this.setState({ owner: ownerInfo.address });\n      });\n    firebaseService.getContractForAsset(index).then((response) => {\n      this.setState({\n        contract: response,\n        price: response?.data()[FirebaseFields.Price],\n        status: response?.data()[FirebaseFields.Status],\n      });\n    });\n  };\n\n  sellAsset = async (price: number): Promise<void> => {\n    const {\n      address: seller,\n      assetIndex,\n      firebaseService,\n      chainService,\n    } = this.props;\n\n    if (seller && price) {\n      this.setState({ fetching: true });\n      try {\n        const contract = await this.contractService.generateAssetSaleContract(\n          seller,\n          assetIndex,\n          price\n        );\n        const contractResult = contract.result;\n        const response = await firebaseService.addDocument(\n          FirebaseCollections.AssetSaleContracts,\n          {\n            seller,\n            asset_index: assetIndex,\n            price,\n            contract_result: contractResult,\n            status: Status.Pending,\n            is_main: chainService.isMainNet,\n            created_on: serverTimestamp(),\n          }\n        );\n        // confirm transaction\n        await this.transactionService.sellAsset({\n          seller,\n          assetIndex,\n          contractResult,\n        });\n        firebaseService.updateDocument(\n          FirebaseCollections.AssetSaleContracts,\n          response.id,\n          {\n            status: Status.Active,\n            updated_on: serverTimestamp(),\n          }\n        );\n        this.setState({ contract: response, status: Status.Active, price });\n      } catch (error) {\n        throw error;\n      }\n      this.setState({ fetching: false });\n    }\n  };\n\n  buyAsset = async (): Promise<void> => {\n    const { connector, address: buyer, assetIndex } = this.props;\n    if (!buyer) {\n      connector.createSession();\n      return;\n    }\n\n    const contractSig = await this.getContractSig();\n    const seller = this.state.contract.data()[FirebaseFields.Seller];\n    const price = this.state.contract.data()[FirebaseFields.Price];\n\n    if (contractSig && seller && price) {\n      this.setState({ fetching: true });\n      try {\n        // confirm transaction\n        await this.transactionService.buyAsset({\n          buyer,\n          seller,\n          assetIndex,\n          price,\n          contractSig,\n        });\n        this.props.firebaseService.updateDocument(\n          FirebaseCollections.AssetSaleContracts,\n          this.state.contract.id,\n          {\n            status: Status.Complete,\n            updated: serverTimestamp(),\n            buyer,\n          }\n        );\n        this.setState({ contract: null, status: Status.Complete });\n      } catch (error) {\n        throw error;\n      }\n      this.setState({ fetching: false });\n    }\n  };\n\n  getContractSig = async (): Promise<LogicSigAccount> => {\n    const contractResult =\n      this.state.contract.data()[FirebaseFields.ContractResult];\n    const contract = new Uint8Array(Buffer.from(contractResult, 'base64'));\n    return new LogicSigAccount(contract);\n  };\n\n  setAssetMetadata = async (url: any): Promise<void> => {\n    const ipfsUrl = url.replace(IPFS, IPFS_DOMAIN);\n    const data = await this.contractService.getAssetMetadataFromIpfs(ipfsUrl);\n    // const imageSrc = data.properties.source_image.replace(IPFS, IPFS_DOMAIN);\n    const imageSrc = data.image.replace(IPFS, IPFS_DOMAIN);\n    this.setState({\n      description: data.description,\n      imageSrc,\n      externalUrl: data.external_url,\n    });\n  };\n\n  render() {\n    const assetInfo = this.state.assetInfo;\n    const renderButton = () => {\n      const isCreator = assetInfo?.creator === this.props.address;\n      const hasContract = this.state.contract;\n      const isSold = this.state.status === Status.Complete;\n      if (isSold) {\n        return (\n          <SButton disabled className=\"w-100\">\n            <div className=\"flex justify-center\">\n              <span className=\"white\">\n                Sold for {formatMoney(this.state.price)}\n              </span>\n              <SIcon src={algo_light} alt=\"algos\" />\n            </div>\n          </SButton>\n        );\n      } else if (isCreator) {\n        return hasContract ? (\n          <SButton disabled className=\"w-100\">\n            <div className=\"flex justify-center\">\n              <span className=\"white\">\n                On Sale for {formatMoney(this.state.price)}\n              </span>\n              <SIcon src={algo_light} alt=\"algos\" />\n            </div>\n          </SButton>\n        ) : (\n          <SellForm sellAsset={this.sellAsset} />\n        );\n      } else {\n        return hasContract ? (\n          <BuyButton\n            address={this.props.address}\n            price={this.state.price}\n            buyAsset={this.buyAsset}\n          ></BuyButton>\n        ) : (\n          <SButton disabled className=\"w-100\">\n            Not on Sale\n          </SButton>\n        );\n      }\n    };\n\n    return (\n      assetInfo && (\n        <div className=\"pv5-ns ph6-ns pt4\">\n          <p className=\"f3 b\">{assetInfo.name}</p>\n          <div className=\"flex flex-row-ns flex-column justify-between\">\n            <div className=\"w-40-ns\">\n              <SImage src={this.state.imageSrc} alt=\"nft\" />\n              <div className=\"mt3\">{renderButton()}</div>\n            </div>\n            <div className=\"w-50-ns mt0-ns mt4\">\n              <SAssetInfo>\n                <span className=\"b mb2 f6 light-red\">owner</span>\n                <span>{this.state.owner}</span>\n              </SAssetInfo>\n              {this.state.description && (\n                <SAssetInfo>\n                  <span className=\"b mb2 f6 light-red\">description</span>\n                  <span>{this.state.description}</span>\n                </SAssetInfo>\n              )}\n              <SAssetInfo>\n                <span className=\"b mb2 f6 light-red\">url</span>\n                <span>{assetInfo.url}</span>\n              </SAssetInfo>\n              <SAssetInfo>\n                <span className=\"b mb2 f6 light-red\">link to artwork</span>\n                <a href={this.state.externalUrl} target=\"_blank\" className='light-blue'>{this.state.externalUrl}</a>\n              </SAssetInfo>\n              <SAssetInfo>\n                <span className=\"b mb2 f6 light-red\">creator</span>\n                <span>{assetInfo.creator}</span>\n              </SAssetInfo>\n            </div>\n          </div>\n        </div>\n      )\n    );\n  }\n}\n\nfunction AssetPageWithParams(props: any) {\n  const params = useParams();\n  return <AssetPage {...props} assetIndex={Number(params.index)} />;\n}\n\nexport default AssetPageWithParams;\n","import React, { ChangeEvent } from 'react';\nimport { SButton } from '../utils';\n\ninterface SellFormProps {\n  sellAsset: (price: number) => {};\n}\n\ninterface SellFormState {\n  price: number;\n}\n\nconst DEFAULT_PRICE = -1;\n\nclass SellForm extends React.Component<SellFormProps, SellFormState> {\n  state = { price: DEFAULT_PRICE };\n\n  onSellAsset = () => this.props.sellAsset(this.state.price);\n\n  onInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const price: number = parseInt(event.target.value) ?? DEFAULT_PRICE;\n    this.setState({ price });\n  };\n  render() {\n    return (\n      <div className='mv3 w-100 flex items-center justify-between'>\n        <input\n          className='pa2 ba br2 w-60'\n          type='number'\n          min='1'\n          step='1'\n          name='price'\n          onChange={this.onInputChange}\n          required\n          placeholder='Price in Algo'\n        />\n        <SButton className='w-third pointer' onClick={this.onSellAsset}>\n          Put on Sale\n        </SButton>\n      </div>\n    );\n  }\n}\n\nexport default SellForm;\n","export default class ContractService {\n  generateAssetSaleContract = async (\n    seller: string,\n    asset: number,\n    price: number\n  ): Promise<any> => {\n    try {\n      const url = `https://us-central1-${process.env.REACT_APP_FIREBASE_ID}.cloudfunctions.net/asset_sale_contract?seller=${seller}&asset=${asset}&price=${price}`;\n      const request = await fetch(url);\n      return await request.json();\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getAssetMetadataFromIpfs = async (url: string): Promise<any> => {\n    try {\n      return fetch(url).then((response) => response?.json());\n    } catch (error) {\n      throw error;\n    }\n  };\n}\n","import algosdk, { LogicSigAccount, Transaction } from 'algosdk';\nimport ChainService from './ChainService';\nimport WalletService from './WalletService';\n\nexport default class TransactionService {\n  algod = new ChainService().algod;\n  walletService = new WalletService();\n\n  sendAndConfirm = async (\n    signedTxns: Uint8Array[]\n  ): Promise<Record<string, any>> => {\n    try {\n      const sentTxns = await this.algod.sendRawTransaction(signedTxns).do();\n      console.log('sentTxns', sentTxns);\n      const confirmedTxns = await algosdk.waitForConfirmation(\n        this.algod,\n        sentTxns.txId,\n        4\n      );\n      return confirmedTxns;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  sellAsset = async ({\n    seller,\n    assetIndex,\n    contractResult,\n  }: any): Promise<Record<string, any>> => {\n    try {\n      const contractEncoded = new Uint8Array(\n        Buffer.from(contractResult, 'base64')\n      );\n      const contractSig = new LogicSigAccount(contractEncoded);\n      const suggestedParams = await this.algod.getTransactionParams().do();\n      // fund escrow\n      const txn0: Transaction =\n        algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n          from: seller,\n          to: contractSig.address(),\n          amount: 0.5 * 1e6,\n          suggestedParams,\n        });\n      // opt in escrow\n      const txn1: Transaction =\n        algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: contractSig.address(),\n          to: contractSig.address(),\n          amount: 0,\n          assetIndex,\n          suggestedParams,\n        });\n      // transfer asset to escrow\n      const txn2: Transaction =\n        algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: seller,\n          to: contractSig.address(),\n          assetIndex,\n          amount: 1,\n          suggestedParams,\n        });\n\n      const group = algosdk.assignGroupID([txn0, txn1, txn2]);\n      const signedTxns = await this.walletService.sign(group);\n      signedTxns[1] = algosdk.signLogicSigTransactionObject(\n        group[1],\n        contractSig\n      ).blob;\n\n      const confirmedTxns = await this.sendAndConfirm(signedTxns);\n      return confirmedTxns;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  buyAsset = async ({\n    buyer,\n    seller,\n    assetIndex,\n    price,\n    contractSig,\n  }: any): Promise<Record<string, any>> => {\n    try {\n      const suggestedParams = await this.algod.getTransactionParams().do();\n      // pay seller\n      const txn0 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: buyer,\n        to: seller,\n        amount: price * 1e6 * 0.9,\n        suggestedParams,\n      });\n      // opt in buyer\n      const txn1 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        from: buyer,\n        to: buyer,\n        amount: 0,\n        assetIndex,\n        suggestedParams,\n      });\n      // transfer asset to buyer\n      const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        from: contractSig.address(),\n        to: buyer,\n        amount: 1,\n        assetIndex,\n        closeRemainderTo: buyer,\n        suggestedParams,\n      });\n      // close remainder to seller\n      const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: contractSig.address(),\n        to: seller,\n        amount: 0,\n        closeRemainderTo: seller,\n        suggestedParams,\n      });\n      // pay collaborator\n      const txn4 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: buyer,\n        to: process.env.REACT_APP_COLLABORATOR_ADDRESS ?? '',\n        amount: price * 1e6 * 0.1,\n        suggestedParams,\n      });\n      const group = algosdk.assignGroupID([txn0, txn1, txn2, txn3, txn4]);\n      const signedTxns = await this.walletService.sign(group);\n\n      signedTxns[2] = algosdk.signLogicSigTransactionObject(\n        group[2],\n        contractSig\n      ).blob;\n      signedTxns[3] = algosdk.signLogicSigTransactionObject(\n        group[3],\n        contractSig\n      ).blob;\n      return await this.sendAndConfirm(signedTxns);\n    } catch (error) {\n      throw error;\n    }\n  };\n}\n","export default __webpack_public_path__ + \"static/media/algo_dark.325d1e4a.svg\";","import { FunctionComponent } from 'react';\nimport algo_dark from '../assets/algo_dark.svg';\nimport { formatMoney, SButton, SIcon } from '../utils';\n\ninterface BuyButtonProps {\n  address: string;\n  price: number;\n  buyAsset: () => {};\n}\n\nconst BuyButton: FunctionComponent<BuyButtonProps> = ({\n  address,\n  price,\n  buyAsset,\n}) => {\n  return (\n    <SButton className='w-100' onClick={buyAsset} disabled={!address}>\n      {address ? (\n        <div className='flex justify-center'>\n          {formatMoney(price)}\n          <SIcon src={algo_dark} alt='algos' />\n        </div>\n      ) : (\n        <span>Connect Wallet to Purchase</span>\n      )}\n    </SButton>\n  );\n};\n\nexport default BuyButton;\n","export default __webpack_public_path__ + \"static/media/logo.21e62254.svg\";","import WalletConnect from '@walletconnect/client';\nimport { FunctionComponent } from 'react';\nimport styled from 'styled-components';\nimport logo from '../../src/logo.svg';\nimport { ellipseAddress } from '../utils';\nimport { SButton } from '../utils';\n\ninterface HeaderProps {\n  address: string;\n  connector: WalletConnect;\n  killSession: () => void;\n}\n\nconst SAddress = styled.span`\n  color: aqua;\n`;\n\nconst Header: FunctionComponent<HeaderProps> = ({\n  address,\n  connector,\n  killSession,\n}: HeaderProps) => {\n  const connectWallet = async () => connector.createSession();\n\n  return (\n    <div className='flex items-center justify-between sans-serif'>\n      <div className='flex items-center w-50'>\n        <img src={logo} className='app-logo mr2' alt='logo' />\n        <span className='f4'>Mushroom Cloud NFT</span>\n      </div>\n      {address ? (\n        <div className='flex flex-column tr'>\n          <SAddress>{ellipseAddress(address)}</SAddress>\n          <span className='pointer-fade f6' onClick={killSession}>\n            Disconnect\n          </span>\n        </div>\n      ) : (\n        <SButton onClick={connectWallet}>\n          Connect Wallet\n        </SButton>\n      )}\n    </div>\n  );\n};\n\nexport default Header;\n","import { FunctionComponent } from 'react';\n\ninterface HomePageProps {}\n\nconst HomePage: FunctionComponent<HomePageProps> = () => {\n  return (\n    <div className=\"vh-75 flex flex-column justify-center\">\n      <h1>Mushroom Cloud LA / Proximities</h1>\n      <h2>by Nancy Baker Cahill</h2>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import { getAnalytics } from 'firebase/analytics';\nimport { initializeApp } from 'firebase/app';\nimport {\n  addDoc,\n  collection,\n  deleteDoc,\n  doc,\n  DocumentData,\n  DocumentSnapshot,\n  getDoc,\n  getDocs,\n  getFirestore,\n  query,\n  QueryDocumentSnapshot,\n  updateDoc,\n  where,\n} from 'firebase/firestore';\nimport { FirebaseCollections, FirebaseFields, Status } from '../utils';\nimport ChainService from './ChainService';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_ID + 'firebaseapp.com',\n  projectId: process.env.REACT_APP_FIREBASE_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_ID + 'appspot.com',\n  messagingSenderId: '138191449972',\n  appId: '1:138191449972:web:e9ab144c0b4bc016cb0621',\n};\n\nexport default class FirebaseService {\n  currentAccountData = {};\n  chainService = new ChainService();\n\n  setup = async ({ account }: any): Promise<void> => {\n    initializeApp(firebaseConfig);\n    getAnalytics();\n    if (account) {\n      const currentAccount = await this.getDocument('accounts', account);\n      this.currentAccountData = currentAccount.exists()\n        ? currentAccount.data()\n        : {};\n    } else {\n      this.currentAccountData = {};\n    }\n  };\n\n  addDocument = async (\n    collectionName: string,\n    data: any\n  ): Promise<DocumentSnapshot<any>> => {\n    const firestore = getFirestore();\n    const ref = collection(firestore, collectionName);\n    const response = await addDoc(ref, data);\n    return await getDoc(response);\n  };\n\n  getDocument = async (\n    collectionName: string,\n    docIndex: string\n  ): Promise<DocumentSnapshot<DocumentData>> => {\n    const firestore = getFirestore();\n    const ref = doc(firestore, collectionName, docIndex);\n    return await getDoc(ref);\n  };\n\n  updateDocument = async (\n    collectionName: string,\n    docIndex: string,\n    data: any\n  ): Promise<void> => {\n    const firestore = getFirestore();\n    const ref = doc(firestore, collectionName, docIndex);\n    await updateDoc(ref, data);\n  };\n\n  deleteDocument = async (\n    collectionName: string,\n    docIndex: string\n  ): Promise<void> => {\n    const firestore = getFirestore();\n    const ref = doc(firestore, collectionName, docIndex);\n    return await deleteDoc(ref);\n  };\n\n  getContractForAsset = async (\n    index: number\n  ): Promise<QueryDocumentSnapshot<DocumentData> | null> => {\n    const firestore = getFirestore();\n    const ref = collection(firestore, FirebaseCollections.AssetSaleContracts);\n    const contracts = query(\n      ref,\n      where(FirebaseFields.AssetIndex, '==', index),\n      where(FirebaseFields.Status, '==', Status.Active)\n    );\n    const snapshot = await getDocs(contracts);\n    if (snapshot.docs.length > 0 && snapshot.docs[0].exists()) {\n      return snapshot.docs[0];\n    } else {\n      return null;\n    }\n  };\n\n  getContractsForSeller = async (\n    address: string\n  ): Promise<QueryDocumentSnapshot<DocumentData>[]> => {\n    const firestore = getFirestore();\n    const ref = collection(firestore, FirebaseCollections.AssetSaleContracts);\n    const filter = query(\n      ref,\n      where(FirebaseFields.Seller, '==', address),\n      where(FirebaseFields.Status, '==', Status.Active),\n      where(FirebaseFields.IsMain, '==', this.chainService.isMainNet)\n    );\n    const snapshot = await getDocs(filter);\n    return snapshot.docs;\n  };\n}\n","import WalletConnect from '@walletconnect/client';\nimport { IInternalEvent } from '@walletconnect/types';\nimport React from 'react';\nimport { BrowserRouter, Navigate, Route, Routes } from 'react-router-dom';\nimport './App.css';\nimport Header from './components/Header';\nimport AssetPage from './pages/AssetPage';\nimport HomePage from './pages/HomePage';\nimport ChainService from './services/ChainService';\nimport FirebaseService from './services/FirebaseService';\nimport WalletService from './services/WalletService';\n\ninterface AppProps {}\n\ninterface AppState {\n  connector: WalletConnect;\n  firebaseService: FirebaseService;\n  chainService: ChainService;\n  address: string;\n  connected: boolean;\n  accounts: string[];\n  fetching: boolean;\n}\n\nconst INITIAL_STATE: AppState = {\n  connector: new WalletService().connector,\n  firebaseService: new FirebaseService(),\n  chainService: new ChainService(),\n  address: '',\n  connected: false,\n  accounts: [],\n  fetching: false,\n};\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    const { connected, accounts } = INITIAL_STATE.connector;\n    this.state = {\n      ...INITIAL_STATE,\n      connected,\n      accounts,\n      address: accounts[0],\n    };\n    this.subscribeToWalletEvents();\n    this.setupFirebase();\n    console.log('on mainnet:', this.state.chainService.isMainNet);\n  }\n\n  setupFirebase = async () => {\n    await this.state.firebaseService.setup({ account: this.state.address });\n  };\n\n  subscribeToWalletEvents = async () => {\n    const connector = this.state.connector;\n    if (!connector) return;\n    connector.on('connect', (error: Error | null, payload: any) => {\n      window.location.reload();\n      console.log(`connector.on('connect')`);\n      if (error) throw error;\n      this.onConnect(payload);\n    });\n    connector.on(\n      'session_update',\n      async (error: Error | null, payload: any) => {\n        console.log(`connector.on('session_update')`);\n        if (error) throw error;\n        const accounts = payload.params[0].accounts;\n        this.onSessionUpdate(accounts);\n      }\n    );\n    connector.on('disconnect', (error: Error | null, payload: any) => {\n      console.log(`connector.on('disconnect')`);\n      if (error) throw error;\n      this.onDisconnect();\n    });\n    if (connector.connected) {\n      const { accounts } = connector;\n      this.setState({\n        connected: true,\n        accounts,\n        address: accounts[0],\n      });\n      this.onSessionUpdate(accounts);\n    }\n    this.setState({ connector });\n  };\n\n  onConnect = (payload: IInternalEvent) => {\n    const { accounts } = payload.params[0];\n    this.setState({\n      connected: true,\n      accounts,\n      address: accounts[0],\n    });\n  };\n\n  onSessionUpdate = (accounts: string[]) => {\n    this.setState({ accounts, address: accounts[0] });\n    // this.getAccountAssets();\n  };\n\n  onDisconnect = () => {\n    this.setState({ ...INITIAL_STATE });\n  };\n\n  // getAccountAssets = async () => {\n  //   const { address, chain } = this.state;\n  //   this.setState({ fetching: true });\n  //   try {\n  //     // get account balances\n  //     const assets = await apiGetAccountAssets(chain, address);\n  //     this.setState({ assets });\n  //   } catch (error) {\n  //     this.setState({ fetching: false });\n  //     throw error;\n  //   }\n  //   this.setState({ fetching: false });\n  // };\n\n  killSession = () => {\n    const { connector } = this.state;\n    if (connector) connector.killSession();\n    this.setState({ ...INITIAL_STATE });\n  };\n\n  render() {\n    const { connector, firebaseService, chainService, address } = this.state;\n    return (\n      <div className='code'>\n        <Header\n          address={address}\n          connector={connector}\n          killSession={this.killSession}\n        ></Header>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <Routes>\n            <Route path='/' element={<HomePage />} />\n            <Route\n              path='/asset/:index'\n              element={\n                <AssetPage\n                  chainService={chainService}\n                  firebaseService={firebaseService}\n                  address={address}\n                  connector={connector}\n                />\n              }\n            />\n            <Route path='*' element={<Navigate to='/' replace />} />\n          </Routes>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Algodv2, Indexer } from 'algosdk';\nimport {\n  ALGOD_HOST_MAIN,\n  ALGOD_HOST_TEST,\n  INDEXER_HOST_MAIN,\n  INDEXER_HOST_TEST,\n  NodeEnv,\n} from '../utils';\n\nexport default class ChainService {\n  isMainNet: boolean = process.env.NODE_ENV === NodeEnv.Production;\n  algodHost: string = this.isMainNet ? ALGOD_HOST_MAIN : ALGOD_HOST_TEST;\n  algod: Algodv2 = new Algodv2('', this.algodHost, '');\n  indexerHost: string = this.isMainNet ? INDEXER_HOST_MAIN : INDEXER_HOST_TEST;\n  indexer: Indexer = new Indexer('', this.indexerHost, '');\n}\n","import { formatJsonRpcRequest } from '@json-rpc-tools/utils';\nimport WalletConnect from '@walletconnect/client';\nimport QRCodeModal from 'algorand-walletconnect-qrcode-modal';\nimport algosdk from 'algosdk';\nimport { BRIDGE } from '../utils';\n\nexport default class WalletService {\n  connector = new WalletConnect({\n    bridge: BRIDGE,\n    qrcodeModal: QRCodeModal,\n  });\n\n  sign = async (txns: any): Promise<Uint8Array[]> => {\n    const txnsToSign = txns.map((txn: any) => {\n      const encodedTxn = Buffer.from(\n        algosdk.encodeUnsignedTransaction(txn)\n      ).toString('base64');\n      let result: any = { txn: encodedTxn };\n      if (this.connector.accounts.includes(txn.from)) result.signers = [];\n      return result;\n    });\n    const request = formatJsonRpcRequest('algo_signTxn', [txnsToSign]);\n    const response = await this.connector.sendCustomRequest(request);\n    const signedTxns = response.map((element: string) =>\n      element ? new Uint8Array(Buffer.from(element, 'base64')) : null\n    );\n    return signedTxns;\n  };\n}\n"],"sourceRoot":""}