{"version":3,"sources":["assets/algo_light.svg","utils/consts.ts","utils/enums.ts","utils/functions.ts","utils/styled-components.ts","pages/AssetPage.tsx","components/SellForm.tsx","services/ContractService.tsx","services/FirebaseService.tsx","services/TransactionService.tsx","assets/algo_dark.svg","components/BuyButton.tsx","logo.svg","components/Header.tsx","pages/HomePage.tsx","App.tsx","reportWebVitals.ts","index.tsx","services/ChainService.tsx","services/WalletService.tsx"],"names":["Chain","Status","FirebaseFields","FirebaseCollections","NodeEnv","BRIDGE","ALGOD_HOST_MAIN","ALGOD_HOST_TEST","INDEXER_HOST_MAIN","INDEXER_HOST_TEST","IPFS","IPFS_DOMAIN","ellipseAddress","address","width","slice","SButton","styled","button","SImage","img","SAssetInfo","div","SIcon","INITIAL_STATE","fetching","contract","price","owner","assetInfo","imageSrc","description","status","AssetPage","props","firebaseService","FirebaseService","contractService","ContractService","transactionService","TransactionService","chainService","ChainService","setAsset","index","a","setState","indexer","lookupAssetByID","do","then","response","asset","params","getAssetMetadata","url","catch","error","console","lookupAssetBalances","ownerInfo","balances","find","item","amount","getContractForAsset","data","Price","sellAsset","seller","assetIndex","generateAssetSaleContract","contractResult","result","addDocument","AssetSaleContracts","asset_index","contract_result","Pending","is_main","isMainNet","created_on","serverTimestamp","updateDocument","id","Active","updated_on","buyAsset","connector","createSession","state","ContractResult","Uint8Array","Buffer","from","contractSig","LogicSigAccount","buyer","Seller","Complete","updated","ipfsUrl","replace","getAssetMetadataFromIpfs","properties","source_image","this","setup","account","log","className","name","src","alt","isManager","manager","hasContract","disabled","algo_light","renderButtons","creator","React","Component","AssetPageWithParams","useParams","Number","SellForm","onSellAsset","onInputChange","event","parseInt","target","value","type","min","step","onChange","required","placeholder","onClick","process","fetch","request","json","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","currentAccountData","initializeApp","getAnalytics","getDocument","currentAccount","exists","collectionName","firestore","getFirestore","ref","collection","addDoc","getDoc","docIndex","doc","updateDoc","deleteDocument","deleteDoc","contracts","query","where","getDocs","snapshot","docs","length","getContractsForSeller","filter","IsMain","algod","walletService","WalletService","sendAndConfirm","signedTxns","sendRawTransaction","sentTxns","algosdk","waitForConfirmation","txId","confirmedTxns","contractEncoded","getTransactionParams","suggestedParams","txn0","makePaymentTxnWithSuggestedParamsFromObject","to","txn1","makeAssetTransferTxnWithSuggestedParamsFromObject","txn2","group","assignGroupID","sign","signLogicSigTransactionObject","blob","closeRemainderTo","txn3","txn4","BuyButton","algo_dark","SAddress","span","Header","killSession","connectWallet","logo","HomePage","connected","accounts","App","subscribeToWalletEvents","on","payload","onConnect","onSessionUpdate","onDisconnect","basename","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","Production","algodHost","Algodv2","indexerHost","Indexer","WalletConnect","bridge","qrcodeModal","QRCodeModal","txns","txnsToSign","map","txn","encodeUnsignedTransaction","toString","includes","signers","formatJsonRpcRequest","sendCustomRequest"],"mappings":"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","file":"static/js/main.4cfcdb09.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/algo_light.4f066c4c.svg\";","export const BRIDGE = 'https://bridge.walletconnect.org';\nexport const ALGOD_HOST_MAIN = 'https://node.algoexplorerapi.io';\nexport const ALGOD_HOST_TEST = 'https://node.testnet.algoexplorerapi.io';\nexport const INDEXER_HOST_MAIN = 'https://algoindexer.algoexplorerapi.io/';\nexport const INDEXER_HOST_TEST =\n  'https://algoindexer.testnet.algoexplorerapi.io/';\nexport const IPFS = 'ipfs://';\nexport const IPFS_DOMAIN = 'https://ipfs.io/ipfs/';\nexport const ARTIST_SOUND_ADDRESS =\n  'OBVRRZENURKIN7QSSCGXAQ3Y642BLMGXZWJUQTHW7WWKY5DINHE3GYRBTU';\n","export enum Chain {\n  MainNet = 'mainnet',\n  TestNet = 'testnet',\n}\n\nexport enum Status {\n  Pending = 'pending',\n  Active = 'active',\n  Complete = 'complete',\n}\n\nexport enum FirebaseFields {\n  Seller = 'seller',\n  AssetIndex = 'asset_index',\n  Price = 'price',\n  ContractResult = 'contract_result',\n  Status = 'status',\n  IsMain = 'is_main',\n  CreatedOn = 'created_on',\n  UpdatedOn = 'updated_on',\n}\n\nexport enum FirebaseCollections {\n  AssetSaleContracts = 'asset_sale_contracts',\n}\n\nexport enum NodeEnv {\n  Production = 'production',\n}\n","export function ellipseAddress(address: string, width = 6): string {\n  return `${address.slice(0, width)}...${address.slice(-width)}`;\n}\n","import styled from 'styled-components';\n\nexport const SButton = styled.button`\n  border-radius: 0.5rem;\n  padding: 0.5rem 1rem;\n`;\n\nexport const SImage = styled.img`\n  max-width: 100%;\n  border-radius: 0.5rem;\n  border-style: solid;\n  border-width: 0.05rem;\n`;\n\nexport const SAssetInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 0 1rem 2rem 1rem;\n  overflow-wrap: break-word;\n`;\n\nexport const SIcon = styled.img`\n  height: 1rem;\n  margin-left: 0.2rem;\n`;\n","import { serverTimestamp } from '@firebase/firestore';\nimport WalletConnect from '@walletconnect/client';\nimport { LogicSigAccount } from 'algosdk';\nimport React from 'react';\nimport { useParams } from 'react-router';\nimport algo_light from '../assets/algo_light.svg';\nimport BuyButton from '../components/BuyButton';\nimport SellForm from '../components/SellForm';\nimport ChainService from '../services/ChainService';\nimport ContractService from '../services/ContractService';\nimport FirebaseService from '../services/FirebaseService';\nimport TransactionService from '../services/TransactionService';\nimport {\n  FirebaseCollections,\n  FirebaseFields,\n  IPFS,\n  IPFS_DOMAIN,\n  SAssetInfo,\n  SButton,\n  SIcon,\n  SImage,\n  Status\n} from '../utils';\n\ninterface AssetPageProps {\n  connector: WalletConnect;\n  address: string;\n  assetIndex: number;\n}\n\ninterface AssetPageState {\n  fetching: boolean;\n  contract: any;\n  price: number;\n  owner: string;\n  assetInfo: any;\n  imageSrc: string;\n  description: string;\n  status: Status | null;\n}\n\nconst INITIAL_STATE: AssetPageState = {\n  fetching: false,\n  contract: null,\n  price: -1,\n  owner: '',\n  assetInfo: null,\n  imageSrc: '',\n  description: '',\n  status: null,\n};\n\nclass AssetPage extends React.Component<AssetPageProps, AssetPageState> {\n  constructor(props: AssetPageProps) {\n    super(props);\n    this.state = { ...INITIAL_STATE };\n  }\n\n  firebaseService = new FirebaseService();\n  contractService = new ContractService();\n  transactionService = new TransactionService();\n  chainService = new ChainService();\n\n  componentDidMount() {\n    this.firebaseService.setup({ account: this.props.address });\n    this.setAsset(this.props.assetIndex);\n    console.log('mainnet:', this.chainService.isMainNet);\n  }\n\n  setAsset = async (index: number) => {\n    this.setState({ fetching: true });\n    this.chainService.indexer\n      .lookupAssetByID(index)\n      .do()\n      .then((response) => {\n        const assetInfo = response.asset.params;\n        this.setState({ assetInfo, fetching: false });\n        this.getAssetMetadata(assetInfo.url);\n      })\n      .catch((error: Error) => {\n        console.error(error);\n      });\n    this.chainService.indexer\n      .lookupAssetBalances(index)\n      .do()\n      .then((response) => {\n        const ownerInfo = response.balances.find((item: any) => item.amount);\n        this.setState({ owner: ownerInfo.address });\n      });\n    this.firebaseService.getContractForAsset(index).then((response) => {\n      this.setState({\n        contract: response,\n        price: response?.data()[FirebaseFields.Price],\n        status: response?.data()[FirebaseFields.Status],\n      });\n    });\n  };\n\n  sellAsset = async (price: number) => {\n    const { address: seller, assetIndex } = this.props;\n\n    if (seller && price) {\n      this.setState({ fetching: true });\n      try {\n        const contract = await this.contractService.generateAssetSaleContract(\n          seller,\n          assetIndex,\n          price\n        );\n        const contractResult = contract.result;\n        const response = await this.firebaseService.addDocument(\n          FirebaseCollections.AssetSaleContracts,\n          {\n            seller,\n            asset_index: assetIndex,\n            price,\n            contract_result: contractResult,\n            status: Status.Pending,\n            is_main: this.chainService.isMainNet,\n            created_on: serverTimestamp(),\n          }\n        );\n        // confirm transaction\n        await this.transactionService.sellAsset({\n          seller,\n          assetIndex,\n          contractResult,\n        });\n        this.firebaseService.updateDocument(\n          FirebaseCollections.AssetSaleContracts,\n          response.id,\n          {\n            status: Status.Active,\n            updated_on: serverTimestamp(),\n          }\n        );\n        this.setState({ contract: response, status: Status.Active, price });\n      } catch (error) {\n        throw error;\n      }\n      this.setState({ fetching: false });\n    }\n  };\n\n  buyAsset = async () => {\n    if (!this.props.address) {\n      this.props.connector.createSession();\n      return;\n    }\n    const contractResult =\n      this.state.contract.data()[FirebaseFields.ContractResult];\n    const contract = new Uint8Array(Buffer.from(contractResult, 'base64'));\n    const contractSig = new LogicSigAccount(contract);\n    const buyer = this.props.address;\n    const seller = this.state.contract.data()[FirebaseFields.Seller];\n    const assetIndex = this.props.assetIndex;\n    const price = this.state.contract.data()[FirebaseFields.Price];\n\n    if (buyer && seller && contractSig && assetIndex && price) {\n      this.setState({ fetching: true });\n      try {\n        // confirm transaction\n        await this.transactionService.buyAsset({\n          buyer,\n          seller,\n          assetIndex,\n          price,\n          contractSig,\n        });\n        this.firebaseService.updateDocument(\n          FirebaseCollections.AssetSaleContracts,\n          this.state.contract.id,\n          {\n            status: Status.Complete,\n            updated: serverTimestamp(),\n            buyer,\n          }\n        );\n        this.setState({ status: Status.Complete, contract: null });\n      } catch (error) {\n        throw error;\n      }\n      this.setState({ fetching: false });\n    }\n  };\n\n  getAssetMetadata = async (url: any) => {\n    const ipfsUrl = url.replace(IPFS, IPFS_DOMAIN);\n    const data = await this.contractService.getAssetMetadataFromIpfs(ipfsUrl);\n    const imageSrc = data.properties.source_image.replace(IPFS, IPFS_DOMAIN);\n    this.setState({ description: data.description, imageSrc });\n  };\n\n  render() {\n    const assetInfo = this.state.assetInfo;\n    const renderButtons = () => {\n      const isManager = assetInfo?.manager === this.props.address;\n      const hasContract = this.state.contract;\n      const isSold = this.state.status === Status.Complete;\n      if (isSold) {\n        return (\n          <SButton disabled className='w-100'>\n            <div className='flex justify-center'>\n              <span className='white'>Sold for {this.state.price}</span>\n              <SIcon src={algo_light} alt='algos' />\n            </div>\n          </SButton>\n        );\n      } else if (isManager) {\n        return hasContract ? (\n          <SButton disabled className='w-100'>\n            <div className='flex justify-center'>\n              <span className='white'>On Sale for {this.state.price}</span>\n              <SIcon src={algo_light} alt='algos' />\n            </div>\n          </SButton>\n        ) : (\n          <SellForm sellAsset={this.sellAsset} />\n        );\n      } else {\n        return hasContract ? (\n          <BuyButton\n            price={this.state.price}\n            buyAsset={this.buyAsset}\n          ></BuyButton>\n        ) : (\n          <SButton disabled className='w-100'>\n            Not on Sale\n          </SButton>\n        );\n      }\n    };\n\n    return (\n      assetInfo && (\n        <div className='pv5 ph6'>\n          <p className='f3 b'>{assetInfo.name}</p>\n          <div className='flex justify-between'>\n            <div className='w-40'>\n              <SImage src={this.state.imageSrc} alt='nft' />\n              <div className='mt3'>{renderButtons()}</div>\n            </div>\n            <div className='w-50'>\n              <SAssetInfo>\n                <span className='b mb1 color-accent'>owner</span>\n                <span>{this.state.owner}</span>\n              </SAssetInfo>\n              {this.state.description && (\n                <SAssetInfo>\n                  <span className='b mb1 color-accent'>description</span>\n                  <span>{this.state.description}</span>\n                </SAssetInfo>\n              )}\n              <SAssetInfo>\n                <span className='b mb1 color-accent'>url</span>\n                <span>{assetInfo.url}</span>\n              </SAssetInfo>\n              <SAssetInfo>\n                <span className='b mb1 color-accent'>creator</span>\n                <span>{assetInfo.creator}</span>\n              </SAssetInfo>\n            </div>\n          </div>\n        </div>\n      )\n    );\n  }\n}\n\nfunction AssetPageWithParams(props: any) {\n  const params = useParams();\n  return <AssetPage {...props} assetIndex={Number(params.index)} />;\n}\n\nexport default AssetPageWithParams;\n","import React, { ChangeEvent } from 'react';\nimport { SButton } from '../utils';\n\ninterface SellFormProps {\n  sellAsset: (price: number) => {};\n}\n\ninterface SellFormState {\n  price: number;\n}\n\nconst DEFAULT_PRICE = -1;\n\nclass SellForm extends React.Component<SellFormProps, SellFormState> {\n  state = { price: DEFAULT_PRICE };\n\n  onSellAsset = () => this.props.sellAsset(this.state.price);\n\n  onInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const price: number = parseInt(event.target.value) ?? DEFAULT_PRICE;\n    this.setState({ price });\n  };\n  render() {\n    return (\n      <div className='mv3 w-100 flex items-center justify-between'>\n        <input\n          className='pa2 ba br2 w-60'\n          type='number'\n          min='1'\n          step='1'\n          name='price'\n          onChange={this.onInputChange}\n          required\n          placeholder='Price in Algo'\n        />\n        <SButton className='w-third pointer' onClick={this.onSellAsset}>\n          Put on Sale\n        </SButton>\n      </div>\n    );\n  }\n}\n\nexport default SellForm;\n","export default class ContractService {\n  generateAssetSaleContract = async (\n    seller: string,\n    asset: number,\n    price: number\n  ) => {\n    try {\n      const url = `https://us-central1-${process.env.REACT_APP_FIREBASE_ID}.cloudfunctions.net/asset_sale_contract?seller=${seller}&asset=${asset}&price=${price}`;\n      const request = await fetch(url);\n      return await request.json();\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getAssetMetadataFromIpfs = async (url: string) => {\n    try {\n      return fetch(url).then((response) => response?.json());\n    } catch (error) {\n      throw error;\n    }\n  };\n}\n","import { getAnalytics } from 'firebase/analytics';\nimport { initializeApp } from 'firebase/app';\nimport {\n  addDoc,\n  collection,\n  deleteDoc,\n  doc,\n  getDoc,\n  getDocs,\n  getFirestore,\n  query,\n  updateDoc,\n  where\n} from 'firebase/firestore';\nimport { FirebaseFields } from '../utils';\nimport ChainService from './ChainService';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_ID + 'firebaseapp.com',\n  projectId: process.env.REACT_APP_FIREBASE_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_ID + 'appspot.com',\n  messagingSenderId: '138191449972',\n  appId: '1:138191449972:web:e9ab144c0b4bc016cb0621',\n};\n\nexport default class FirebaseService {\n  currentAccountData = {};\n  chainService = new ChainService();\n\n  setup = async ({ account }: any) => {\n    initializeApp(firebaseConfig);\n    getAnalytics();\n    if (account) {\n      const currentAccount = await this.getDocument('accounts', account);\n      this.currentAccountData = currentAccount.exists()\n        ? currentAccount.data()\n        : {};\n    } else {\n      this.currentAccountData = {};\n    }\n  };\n\n  addDocument = async (collectionName: string, data: any) => {\n    const firestore = getFirestore();\n    const ref = collection(firestore, collectionName);\n    const response = await addDoc(ref, data);\n    return await getDoc(response);\n  };\n\n  getDocument = async (collectionName: string, docIndex: string) => {\n    const firestore = getFirestore();\n    const ref = doc(firestore, collectionName, docIndex);\n    return await getDoc(ref);\n  };\n\n  updateDocument = async (\n    collectionName: string,\n    docIndex: string,\n    data: any\n  ) => {\n    const firestore = getFirestore();\n    const ref = doc(firestore, collectionName, docIndex);\n    await updateDoc(ref, data);\n  };\n\n  deleteDocument = async (collectionName: string, docIndex: string) => {\n    const firestore = getFirestore();\n    const ref = doc(firestore, collectionName, docIndex);\n    return await deleteDoc(ref);\n  };\n\n  getContractForAsset = async (index: number) => {\n    const firestore = getFirestore();\n    const ref = collection(firestore, 'asset_sale_contracts');\n    const contracts = query(\n      ref,\n      where('asset_index', '==', index),\n      where('status', '==', 'active')\n    );\n    const snapshot = await getDocs(contracts);\n    if (snapshot.docs.length > 0 && snapshot.docs[0].exists()) {\n      return snapshot.docs[0];\n    } else {\n      return null;\n    }\n  };\n\n  getContractsForSeller = async (address: string) => {\n    const firestore = getFirestore();\n    const ref = collection(firestore, 'asset_sale_contracts');\n    const filter = query(\n      ref,\n      where(FirebaseFields.Seller, '==', address),\n      where(FirebaseFields.Status, '==', 'active'),\n      where(FirebaseFields.IsMain, '==', this.chainService.isMainNet)\n    );\n    const snapshot = await getDocs(filter);\n    return snapshot.docs;\n  };\n}\n","import algosdk, { LogicSigAccount, Transaction } from 'algosdk';\nimport ChainService from './ChainService';\nimport WalletService from './WalletService';\n\nexport default class TransactionService {\n  algod = new ChainService().algod;\n  walletService = new WalletService();\n\n  sendAndConfirm = async (signedTxns: Uint8Array[]) => {\n    try {\n      const sentTxns = await this.algod.sendRawTransaction(signedTxns).do();\n      console.log('sentTxns', sentTxns);\n      const confirmedTxns = await algosdk.waitForConfirmation(\n        this.algod,\n        sentTxns.txId,\n        4\n      );\n      console.log('success', confirmedTxns);\n      return confirmedTxns;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  sellAsset = async ({ seller, assetIndex, contractResult }: any) => {\n    try {\n      const contractEncoded = new Uint8Array(\n        Buffer.from(contractResult, 'base64')\n      );\n      const contractSig = new LogicSigAccount(contractEncoded);\n      const suggestedParams = await this.algod.getTransactionParams().do();\n      // fund escrow\n      const txn0: Transaction =\n        algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n          from: seller,\n          to: contractSig.address(),\n          amount: 0.5 * 1e6,\n          suggestedParams,\n        });\n      // opt in escrow\n      const txn1: Transaction =\n        algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: contractSig.address(),\n          to: contractSig.address(),\n          amount: 0,\n          assetIndex,\n          suggestedParams,\n        });\n      // transfer asset to escrow\n      const txn2: Transaction =\n        algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: seller,\n          to: contractSig.address(),\n          assetIndex,\n          amount: 1,\n          suggestedParams,\n        });\n\n      const group = algosdk.assignGroupID([txn0, txn1, txn2]);\n      const signedTxns = await this.walletService.sign(group);\n      signedTxns[1] = algosdk.signLogicSigTransactionObject(\n        group[1],\n        contractSig\n      ).blob;\n\n      const confirmedTxns = await this.sendAndConfirm(signedTxns);\n      return confirmedTxns;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  buyAsset = async ({ buyer, seller, assetIndex, price, contractSig }: any) => {\n    try {\n      const suggestedParams = await this.algod.getTransactionParams().do();\n      // pay seller\n      const txn0 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: buyer,\n        to: seller,\n        amount: price * 1e6 * 0.9,\n        suggestedParams,\n      });\n      // opt in buyer\n      const txn1 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        from: buyer,\n        to: buyer,\n        amount: 0,\n        assetIndex,\n        suggestedParams,\n      });\n      // transfer asset to buyer\n      const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        from: contractSig.address(),\n        to: buyer,\n        amount: 1,\n        assetIndex,\n        closeRemainderTo: buyer,\n        suggestedParams,\n      });\n      // close remainder to seller\n      const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: contractSig.address(),\n        to: seller,\n        amount: 0,\n        closeRemainderTo: seller,\n        suggestedParams,\n      });\n      // pay collaborator\n      const txn4 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: buyer,\n        to: process.env.REACT_APP_COLLABORATOR_ADDRESS ?? '',\n        amount: price * 1e6 * 0.1,\n        suggestedParams,\n      });\n      const group = algosdk.assignGroupID([txn0, txn1, txn2, txn3, txn4]);\n      const signedTxns = await this.walletService.sign(group);\n\n      signedTxns[2] = algosdk.signLogicSigTransactionObject(\n        group[2],\n        contractSig\n      ).blob;\n      signedTxns[3] = algosdk.signLogicSigTransactionObject(\n        group[3],\n        contractSig\n      ).blob;\n\n      return await this.sendAndConfirm(signedTxns);\n    } catch (error) {\n      throw error;\n    }\n  };\n}\n","export default __webpack_public_path__ + \"static/media/algo_dark.325d1e4a.svg\";","import { FunctionComponent } from 'react';\nimport algo_dark from '../assets/algo_dark.svg';\nimport { SIcon, SButton } from '../utils';\n\ninterface BuyButtonProps {\n  price: number;\n  buyAsset: () => {};\n}\n\nconst BuyButton: FunctionComponent<BuyButtonProps> = ({ price, buyAsset }) => {\n  return (\n    <SButton className='pointer-fade w-100' onClick={buyAsset}>\n      <div className='flex justify-center'>\n        {price}\n        <SIcon src={algo_dark} alt='algos' />\n      </div>\n    </SButton>\n  );\n};\n\nexport default BuyButton;\n","export default __webpack_public_path__ + \"static/media/logo.21e62254.svg\";","import WalletConnect from '@walletconnect/client';\nimport { FunctionComponent } from 'react';\nimport styled from 'styled-components';\nimport logo from '../../src/logo.svg';\nimport { ellipseAddress } from '../utils';\nimport { SButton } from '../utils';\n\ninterface HeaderProps {\n  address: string;\n  connector: WalletConnect;\n  killSession: () => void;\n}\n\nconst SAddress = styled.span`\n  color: aqua;\n`;\n\nconst Header: FunctionComponent<HeaderProps> = ({\n  address,\n  connector,\n  killSession,\n}: HeaderProps) => {\n  const connectWallet = async () => connector.createSession();\n\n  return (\n    <div className='flex items-start justify-between'>\n      <div className='flex items-center f4 b w-50'>\n        <img src={logo} className='app-logo mr2' alt='logo' />\n        Mushroom Cloud NFT\n      </div>\n      {address ? (\n        <div className='flex flex-column tr'>\n          <SAddress className='b'>{ellipseAddress(address)}</SAddress>\n          <span className='pointer-fade' onClick={killSession}>\n            Disconnect\n          </span>\n        </div>\n      ) : (\n        <SButton className='pointer-fade' onClick={connectWallet}>\n          Connect Wallet\n        </SButton>\n      )}\n    </div>\n  );\n};\n\nexport default Header;\n","import { FunctionComponent } from 'react';\n\ninterface HomePageProps {}\n\nconst HomePage: FunctionComponent<HomePageProps> = () => {\n  return (\n    <div className=\"vh-75 flex flex-column justify-center\">\n      <h1>Mushroom Cloud LA / Proximities</h1>\n      <h2>by Nancy Baker Cahill</h2>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import WalletConnect from '@walletconnect/client';\nimport { IInternalEvent } from '@walletconnect/types';\nimport React from 'react';\nimport { BrowserRouter, Navigate, Route, Routes } from 'react-router-dom';\nimport './App.css';\nimport Header from './components/Header';\nimport AssetPage from './pages/AssetPage';\nimport HomePage from './pages/HomePage';\nimport WalletService from './services/WalletService';\n\ninterface AppProps {}\n\ninterface AppState {\n  connector: WalletConnect;\n  fetching: boolean;\n  connected: boolean;\n  accounts: string[];\n  address: string;\n}\n\nconst INITIAL_STATE: AppState = {\n  connector: new WalletService().connector,\n  fetching: false,\n  connected: false,\n  accounts: [],\n  address: '',\n};\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    const { connector } = INITIAL_STATE;\n    const { connected, accounts } = connector;\n    this.state = {\n      ...INITIAL_STATE,\n      connected,\n      accounts,\n      address: accounts[0],\n    };\n  }\n\n  componentDidMount() {\n    this.subscribeToWalletEvents();\n  }\n\n  subscribeToWalletEvents = () => {\n    const connector = this.state.connector;\n    if (!connector) return;\n    connector.on('connect', (error: Error | null, payload: any) => {\n      console.log(`connector.on(\"connect\")`);\n      if (error) throw error;\n      this.onConnect(payload);\n    });\n    connector.on(\n      'session_update',\n      async (error: Error | null, payload: any) => {\n        console.log(`connector.on(\"session_update\")`);\n        if (error) throw error;\n        const accounts = payload.params[0].accounts;\n        this.onSessionUpdate(accounts);\n      }\n    );\n    connector.on('disconnect', (error: Error | null, payload: any) => {\n      console.log(`connector.on(\"disconnect\")`);\n      if (error) throw error;\n      this.onDisconnect();\n    });\n    if (connector.connected) {\n      const { accounts } = connector;\n      this.setState({\n        connected: true,\n        accounts,\n        address: accounts[0],\n      });\n      this.onSessionUpdate(accounts);\n    }\n    this.setState({ connector });\n  };\n\n  onConnect = (payload: IInternalEvent) => {\n    const { accounts } = payload.params[0];\n    this.setState({\n      connected: true,\n      accounts,\n      address: accounts[0],\n    });\n  };\n\n  onSessionUpdate = (accounts: string[]) => {\n    this.setState({ accounts, address: accounts[0] });\n    // this.getAccountAssets();\n  };\n\n  onDisconnect = () => {\n    this.setState({ ...INITIAL_STATE });\n  };\n\n  // getAccountAssets = async () => {\n  //   const { address, chain } = this.state;\n  //   this.setState({ fetching: true });\n  //   try {\n  //     // get account balances\n  //     const assets = await apiGetAccountAssets(chain, address);\n  //     this.setState({ fetching: false, address, assets });\n  //   } catch (error) {\n  //     console.error(error);\n  //     this.setState({ fetching: false });\n  //   }\n  // };\n\n  killSession = () => {\n    const { connector } = this.state;\n    if (connector) connector.killSession();\n    this.setState({ ...INITIAL_STATE });\n  };\n\n  render() {\n    return (\n      <div>\n        <Header\n          address={this.state.address}\n          connector={this.state.connector}\n          killSession={this.killSession}\n        ></Header>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <Routes>\n            <Route path='/' element={<HomePage />} />\n            <Route\n              path='/asset/:index'\n              element={\n                <AssetPage\n                  address={this.state.address}\n                  connector={this.state.connector}\n                />\n              }\n            />\n            <Route path='*' element={<Navigate to='/' replace />} />\n          </Routes>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import algosdk from 'algosdk';\nimport {\n  ALGOD_HOST_MAIN,\n  ALGOD_HOST_TEST,\n  INDEXER_HOST_MAIN,\n  INDEXER_HOST_TEST, NodeEnv\n} from '../utils';\n\nexport default class ChainService {\n  isMainNet = process.env.NODE_ENV === NodeEnv.Production;\n  algodHost = this.isMainNet ? ALGOD_HOST_MAIN : ALGOD_HOST_TEST;\n  algod = new algosdk.Algodv2('', this.algodHost, '');\n  indexerHost = this.isMainNet ? INDEXER_HOST_MAIN : INDEXER_HOST_TEST;\n  indexer = new algosdk.Indexer('', this.indexerHost, '');\n}\n","import { formatJsonRpcRequest } from '@json-rpc-tools/utils';\nimport WalletConnect from '@walletconnect/client';\nimport QRCodeModal from 'algorand-walletconnect-qrcode-modal';\nimport algosdk from 'algosdk';\nimport { BRIDGE } from '../utils';\n\nexport default class WalletService {\n  connector = new WalletConnect({\n    bridge: BRIDGE,\n    qrcodeModal: QRCodeModal,\n  });\n\n  sign = async (txns: any) => {\n    const txnsToSign = txns.map((txn: any) => {\n      const encodedTxn = Buffer.from(\n        algosdk.encodeUnsignedTransaction(txn)\n      ).toString('base64');\n      let result: any = {\n        txn: encodedTxn,\n      };\n      if (this.connector.accounts.includes(txn.from)) {\n        result.signers = [];\n      }\n      return result;\n    });\n    const request = formatJsonRpcRequest('algo_signTxn', [txnsToSign]);\n    const response = await this.connector.sendCustomRequest(request);\n\n    const signedTxns = response.map((element: any) => {\n      return element ? new Uint8Array(Buffer.from(element, 'base64')) : null;\n    });\n\n    return signedTxns;\n  };\n}\n"],"sourceRoot":""}